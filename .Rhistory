X <- matrix(runif(150), nrow=50)
y <- apply(X, 1, duqling::ishigami)
fit <- rfok(X, y)
plot(fit$fit)
fit$alpha?nn2
?nn2
devtools::document()
devtools::document()
pp <- predict(fit)
pp <- predict(fit)
xx <- fit$X
pp <- predict(fit)
class(fit)
library(randomForest)
pp <- predict(fit)
pp <- predict(fit)
pp
dim(pp)
y
colMeans(pp)
plot(y, colMeans(pp))
?quantile
bounds <- apply(pp, 2, quantile, probs = c(a/2, 1-a/2))
conf=0.95
a <- 1-conf
bounds <- apply(pp, 2, quantile, probs = c(a/2, 1-a/2))
bounds
devtools::document()
fit <- rfok(X, y)
plot(fit$y, yhat)
yhat <- colMeans(pp)
bounds <- apply(pp, 2, quantile, probs = c(a/2, 1-a/2))
plot(fit$y, yhat)
abline(0, 1, lwd=2, col='orange')
hist(fit$alpha)
hist(fit$alpha, breaks=30)
object$alpha
devtools::document()
pp <- predict(fit)
pp
yhat <- colMeans(pp)
bounds <- apply(pp, 2, quantile, probs = c(a/2, 1-a/2))
plot(fit$y, yhat)
abline(0, 1, lwd=2, col='orange')
dim(bounds)
segments(fit$y, bounds[1,], fit$y, bounds[2,])
plot(fit$y, yhat, ylim=range(pp))
abline(0, 1, lwd=2, col='orange')
segments(fit$y, bounds[1,], fit$y, bounds[2,])
fit$fit$rsq
ts.plot(fit$fit$rsq)
ts.plot(fit$fit$mse)
plot(fit$fit)
par()
hold_par <- par()
par(hold_par)
par() <- hold_par
hold_par <- par(no.readonly = TRUE)
par(mfrow=c(1,2))
plot(object$y, yhat, ylim=range(pp), main="Predictions")
abline(0, 1, lwd=2, col='orange')
segments(object$y, bounds[1,], object$y, bounds[2,])
plot(object$fit, main="MSE")
par(hold_par)
object = fit
hold_par <- par(no.readonly = TRUE)
par(mfrow=c(1,2))
plot(object$y, yhat, ylim=range(pp), main="Predictions")
abline(0, 1, lwd=2, col='orange')
segments(object$y, bounds[1,], object$y, bounds[2,])
plot(object$fit, main="MSE")
par(hold_par)
plot(object$y, yhat, ylim=range(pp), main="Predictions")
abline(0, 1, lwd=2, col='orange')
segments(object$y, bounds[1,], object$y, bounds[2,])
duqling::ishigami
duqling::borehole
duqling::piston
duqling::quack()
duqling::friedman()
duqling::friedman
library(conforest)
# Friedman function
f <-  function(x){
10 * sin(pi * x[1] * x[2]) + 20 * (x[3] - 0.5)^2 + 10 * x[4] + 5 * x[5]
}
# Generate data
n <- 200
p <- 3
X <- matrix(runif(n*p), nrow=n)
y <- apply(X, 1, f)
# Fit model
fit <- rfok(X, y)
library(conforest)
# Friedman function
f <-  function(x){
10 * sin(pi * x[1] * x[2]) + 20 * (x[3] - 0.5)^2 + 10 * x[4] + 5 * x[5]
}
# Generate data
n <- 200
p <- 5
X <- matrix(runif(n*p), nrow=n)
y <- apply(X, 1, f)
# Fit model
fit <- rfok(X, y)
# Plot Model
plot(fit)
library(conforest)
# Friedman function
f <-  function(x){
10 * sin(pi * x[1] * x[2]) + 20 * (x[3] - 0.5)^2 + 10 * x[4] + 5 * x[5]
}
# Generate data
n <- 200
p <- 5
X <- matrix(runif(n*p), nrow=n)
y <- apply(X, 1, f)
# Fit model
fit <- rfok(X, y)
# Plot Model
plot(fit)
uu <- runif(1)
alpha_delta <- quantile(c(alpha_delta, -alpha_delta), uu)
alpha_delta <- quantile(c(object$alpha, -object$alpha), uu)
uu <- runif(1)
alpha_delta <- quantile(c(object$alpha, -object$alpha), uu)
alpha_delta
library(conforest)
# Friedman function
f <-  function(x){
10 * sin(pi * x[1] * x[2]) + 20 * (x[3] - 0.5)^2 + 10 * x[4] + 5 * x[5]
}
# Generate data
n <- 200
p <- 5
X <- matrix(runif(n*p), nrow=n)
y <- apply(X, 1, f)
# Fit model
fit <- rfok(X, y)
# Plot Model
plot(fit)
hist(quantile(c(object$alpha, -object$alpha), runif(1000)))
sample(object$alpha, 1000, replace=TRUE) * (2*rbinom(1000,1,0.5)- 1)
hist(sample(object$alpha, 1000, replace=TRUE) * (2*rbinom(1000,1,0.5)- 1))
fit
plot(fit)
fit$alpha
sd(fit$alpha)
object = fit
a <- 1-conf
xx <- object$X
pp <- predict(object)
yhat <- colMeans(pp)
bounds <- apply(pp, 2, quantile, probs = c(a/2, 1-a/2))
hold_par <- par(no.readonly = TRUE)
par(mfrow=c(1,2))
plot(object$y, yhat, ylim=range(pp), main="Predictions")
abline(0, 1, lwd=2, col='orange')
segments(object$y, bounds[1,], object$y, bounds[2,])
bounds
a
pp
if(is.null(newdata)){
newdata <- object$X
}
object = fit
newdata = NULL
if(is.null(newdata)){
newdata <- object$X
}
pred <- predict(object$fit, newdata)
n <- length(pred)
if(is.null(conf) & is.null(samples)){
return(pred)
}
samples = 1000
# Get nearest neighbors
neighbors <- RANN::nn2(object$X, newdata, k=min(object$k, nrow(object$X)))$nn.idx
# Estimate mus
mu <- rep(NA, n)
for(i in 1:n){
ind <- neighbors[i,]
mu[i] <- mean(abs(object$oob_error[ind]))
}
mu
samples
preds <- matrix(NA, nrow=samples, ncol=n)
library(conforest)
# Friedman function
f <-  function(x){
10 * sin(pi * x[1] * x[2]) + 20 * (x[3] - 0.5)^2 + 10 * x[4] + 5 * x[5]
}
# Generate data
n <- 200
p <- 5
X <- matrix(runif(n*p), nrow=n)
y <- apply(X, 1, f)
# Fit model
fit <- rfok(X, y)
# Plot Model
plot(fit)
library(conforest)
# Friedman function
f <-  function(x){
10 * sin(pi * x[1] * x[2]) + 20 * (x[3] - 0.5)^2 + 10 * x[4] + 5 * x[5]
}
# Generate data
n <- 200
p <- 5
X <- matrix(runif(n*p), nrow=n)
y <- apply(X, 1, f)
# Fit model
fit <- rfok(X, y)
# Plot Model
plot(fit)
library(conforest)
# Friedman function
f <-  function(x){
10 * sin(pi * x[1] * x[2]) + 20 * (x[3] - 0.5)^2 + 10 * x[4] + 5 * x[5]
}
# Generate data
n <- 200
p <- 5
X <- matrix(runif(n*p), nrow=n)
y <- apply(X, 1, f)
# Fit model
fit <- rfok(X, y)
# Plot Model
plot(fit)
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
library(devtools)
document()
check()
devtools::document()
check()
